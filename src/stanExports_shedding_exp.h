// Generated by rstantools.  Do not edit by hand.

/*
    reactidd is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    reactidd is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with reactidd.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_shedding_exp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_shedding_exp");
    reader.add_event(73, 71, "end", "model_shedding_exp");
    return reader;
}
#include <stan_meta_header.hpp>
class model_shedding_exp
  : public stan::model::model_base_crtp<model_shedding_exp> {
private:
        int N_11;
        vector_d time1_11;
        int N_10;
        vector_d time1_10;
        int N_111;
        vector_d time1_111;
        vector_d time2_111;
        int N_101;
        vector_d time1_101;
        vector_d time2_101;
        int N_110;
        vector_d time1_110;
        vector_d time2_110;
        int N_100;
        vector_d time1_100;
        vector_d time2_100;
public:
    model_shedding_exp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_shedding_exp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_shedding_exp_namespace::model_shedding_exp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N_11", "int", context__.to_vec());
            N_11 = int(0);
            vals_i__ = context__.vals_i("N_11");
            pos__ = 0;
            N_11 = vals_i__[pos__++];
            current_statement_begin__ = 3;
            validate_non_negative_index("time1_11", "N_11", N_11);
            context__.validate_dims("data initialization", "time1_11", "vector_d", context__.to_vec(N_11));
            time1_11 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_11);
            vals_r__ = context__.vals_r("time1_11");
            pos__ = 0;
            size_t time1_11_j_1_max__ = N_11;
            for (size_t j_1__ = 0; j_1__ < time1_11_j_1_max__; ++j_1__) {
                time1_11(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N_10", "int", context__.to_vec());
            N_10 = int(0);
            vals_i__ = context__.vals_i("N_10");
            pos__ = 0;
            N_10 = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("time1_10", "N_10", N_10);
            context__.validate_dims("data initialization", "time1_10", "vector_d", context__.to_vec(N_10));
            time1_10 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_10);
            vals_r__ = context__.vals_r("time1_10");
            pos__ = 0;
            size_t time1_10_j_1_max__ = N_10;
            for (size_t j_1__ = 0; j_1__ < time1_10_j_1_max__; ++j_1__) {
                time1_10(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N_111", "int", context__.to_vec());
            N_111 = int(0);
            vals_i__ = context__.vals_i("N_111");
            pos__ = 0;
            N_111 = vals_i__[pos__++];
            current_statement_begin__ = 9;
            validate_non_negative_index("time1_111", "N_111", N_111);
            context__.validate_dims("data initialization", "time1_111", "vector_d", context__.to_vec(N_111));
            time1_111 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_111);
            vals_r__ = context__.vals_r("time1_111");
            pos__ = 0;
            size_t time1_111_j_1_max__ = N_111;
            for (size_t j_1__ = 0; j_1__ < time1_111_j_1_max__; ++j_1__) {
                time1_111(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("time2_111", "N_111", N_111);
            context__.validate_dims("data initialization", "time2_111", "vector_d", context__.to_vec(N_111));
            time2_111 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_111);
            vals_r__ = context__.vals_r("time2_111");
            pos__ = 0;
            size_t time2_111_j_1_max__ = N_111;
            for (size_t j_1__ = 0; j_1__ < time2_111_j_1_max__; ++j_1__) {
                time2_111(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_101", "int", context__.to_vec());
            N_101 = int(0);
            vals_i__ = context__.vals_i("N_101");
            pos__ = 0;
            N_101 = vals_i__[pos__++];
            current_statement_begin__ = 13;
            validate_non_negative_index("time1_101", "N_101", N_101);
            context__.validate_dims("data initialization", "time1_101", "vector_d", context__.to_vec(N_101));
            time1_101 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_101);
            vals_r__ = context__.vals_r("time1_101");
            pos__ = 0;
            size_t time1_101_j_1_max__ = N_101;
            for (size_t j_1__ = 0; j_1__ < time1_101_j_1_max__; ++j_1__) {
                time1_101(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("time2_101", "N_101", N_101);
            context__.validate_dims("data initialization", "time2_101", "vector_d", context__.to_vec(N_101));
            time2_101 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_101);
            vals_r__ = context__.vals_r("time2_101");
            pos__ = 0;
            size_t time2_101_j_1_max__ = N_101;
            for (size_t j_1__ = 0; j_1__ < time2_101_j_1_max__; ++j_1__) {
                time2_101(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N_110", "int", context__.to_vec());
            N_110 = int(0);
            vals_i__ = context__.vals_i("N_110");
            pos__ = 0;
            N_110 = vals_i__[pos__++];
            current_statement_begin__ = 17;
            validate_non_negative_index("time1_110", "N_110", N_110);
            context__.validate_dims("data initialization", "time1_110", "vector_d", context__.to_vec(N_110));
            time1_110 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_110);
            vals_r__ = context__.vals_r("time1_110");
            pos__ = 0;
            size_t time1_110_j_1_max__ = N_110;
            for (size_t j_1__ = 0; j_1__ < time1_110_j_1_max__; ++j_1__) {
                time1_110(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("time2_110", "N_110", N_110);
            context__.validate_dims("data initialization", "time2_110", "vector_d", context__.to_vec(N_110));
            time2_110 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_110);
            vals_r__ = context__.vals_r("time2_110");
            pos__ = 0;
            size_t time2_110_j_1_max__ = N_110;
            for (size_t j_1__ = 0; j_1__ < time2_110_j_1_max__; ++j_1__) {
                time2_110(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "N_100", "int", context__.to_vec());
            N_100 = int(0);
            vals_i__ = context__.vals_i("N_100");
            pos__ = 0;
            N_100 = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("time1_100", "N_100", N_100);
            context__.validate_dims("data initialization", "time1_100", "vector_d", context__.to_vec(N_100));
            time1_100 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_100);
            vals_r__ = context__.vals_r("time1_100");
            pos__ = 0;
            size_t time1_100_j_1_max__ = N_100;
            for (size_t j_1__ = 0; j_1__ < time1_100_j_1_max__; ++j_1__) {
                time1_100(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("time2_100", "N_100", N_100);
            context__.validate_dims("data initialization", "time2_100", "vector_d", context__.to_vec(N_100));
            time2_100 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_100);
            vals_r__ = context__.vals_r("time2_100");
            pos__ = 0;
            size_t time2_100_j_1_max__ = N_100;
            for (size_t j_1__ = 0; j_1__ < time2_100_j_1_max__; ++j_1__) {
                time2_100(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_shedding_exp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 28;
        if (!(context__.contains_r("sens")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sens missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sens");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sens", "double", context__.to_vec());
        double sens(0);
        sens = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, sens);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sens: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("k")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable k missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("k");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "k", "double", context__.to_vec());
        double k(0);
        k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, k);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable k: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 28;
            local_scalar_t__ sens;
            (void) sens;  // dummy to suppress unused var warning
            if (jacobian__)
                sens = in__.scalar_lub_constrain(0, 1, lp__);
            else
                sens = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 30;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning
            if (jacobian__)
                k = in__.scalar_lb_constrain(0, lp__);
            else
                k = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 37;
            lp_accum__.add(stan::math::log(multiply(sens, stan::math::exp(multiply(minus(time1_11), k)))));
            current_statement_begin__ = 39;
            lp_accum__.add(stan::math::log(add(multiply((1 - sens), stan::math::exp(multiply(minus(time1_10), k))), subtract(1, stan::math::exp(multiply(minus(time1_10), k))))));
            current_statement_begin__ = 41;
            lp_accum__.add(stan::math::log(multiply((sens * sens), stan::math::exp(multiply(minus(time2_111), k)))));
            current_statement_begin__ = 43;
            lp_accum__.add(stan::math::log(add(multiply((sens * (1 - sens)), stan::math::exp(multiply(minus(time2_110), k))), multiply(sens, subtract(stan::math::exp(multiply(minus(time1_110), k)), stan::math::exp(multiply(minus(time2_110), k)))))));
            current_statement_begin__ = 45;
            lp_accum__.add(stan::math::log(multiply(((1 - sens) * sens), stan::math::exp(multiply(minus(time2_101), k)))));
            current_statement_begin__ = 47;
            lp_accum__.add(stan::math::log(add(add(multiply(((1 - sens) * (1 - sens)), stan::math::exp(multiply(minus(time2_100), k))), multiply((1 - sens), subtract(stan::math::exp(multiply(minus(time1_100), k)), stan::math::exp(multiply(minus(time2_100), k))))), subtract(1, stan::math::exp(multiply(minus(time1_100), k))))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sens");
        names__.push_back("k");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_shedding_exp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sens = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(sens);
        double k = in__.scalar_lb_constrain(0);
        vars__.push_back(k);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 52;
            validate_non_negative_index("log_lik", "(((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100)", (((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100));
            std::vector<double> log_lik((((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100), double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 53;
            for (int i = 1; i <= N_11; ++i) {
                current_statement_begin__ = 54;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((sens * stan::math::exp((-(get_base1(time1_11, i, "time1_11", 1)) * k)))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 56;
            for (int i = (1 + N_11); i <= (N_11 + N_10); ++i) {
                current_statement_begin__ = 57;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((((1 - sens) * stan::math::exp((-(get_base1(time1_10, (i - N_11), "time1_10", 1)) * k))) + (1 - stan::math::exp((-(get_base1(time1_10, (i - N_11), "time1_10", 1)) * k))))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 59;
            for (int i = ((1 + N_11) + N_10); i <= ((N_11 + N_10) + N_111); ++i) {
                current_statement_begin__ = 60;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log(((sens * sens) * stan::math::exp((-(get_base1(time2_111, ((i - N_11) - N_10), "time2_111", 1)) * k)))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 62;
            for (int i = (((1 + N_11) + N_10) + N_111); i <= (((N_11 + N_10) + N_111) + N_110); ++i) {
                current_statement_begin__ = 63;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((((sens * (1 - sens)) * stan::math::exp((-(get_base1(time2_110, (((i - N_11) - N_10) - N_111), "time2_110", 1)) * k))) + (sens * (stan::math::exp((-(get_base1(time1_110, (((i - N_11) - N_10) - N_111), "time1_110", 1)) * k)) - stan::math::exp((-(get_base1(time2_110, (((i - N_11) - N_10) - N_111), "time2_110", 1)) * k)))))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 65;
            for (int i = ((((1 + N_11) + N_10) + N_111) + N_110); i <= ((((N_11 + N_10) + N_111) + N_110) + N_101); ++i) {
                current_statement_begin__ = 66;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((((1 - sens) * sens) * stan::math::exp((-(get_base1(time2_101, ((((i - N_11) - N_10) - N_111) - N_110), "time2_101", 1)) * k)))), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 68;
            for (int i = (((((1 + N_11) + N_10) + N_111) + N_110) + N_101); i <= (((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100); ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((((((1 - sens) * (1 - sens)) * stan::math::exp((-(get_base1(time2_100, (((((i - N_11) - N_10) - N_111) - N_110) - N_101), "time2_100", 1)) * k))) + ((1 - sens) * (stan::math::exp((-(get_base1(time1_100, (((((i - N_11) - N_10) - N_111) - N_110) - N_101), "time1_100", 1)) * k)) - stan::math::exp((-(get_base1(time2_100, (((((i - N_11) - N_10) - N_111) - N_110) - N_101), "time2_100", 1)) * k))))) + (1 - stan::math::exp((-(get_base1(time1_100, (((((i - N_11) - N_10) - N_111) - N_110) - N_101), "time1_100", 1)) * k))))), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 52;
            size_t log_lik_k_0_max__ = (((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100);
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_shedding_exp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = (((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100);
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = (((((N_11 + N_10) + N_111) + N_110) + N_101) + N_100);
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_shedding_exp_namespace::model_shedding_exp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
